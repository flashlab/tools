var _a,_b,_c,originalWindow="undefined"==typeof window?void 0:window,originalGlobalThis="undefined"==typeof globalThis?void 0:globalThis,promiseConstructorImpl=null!=(_c=null==(_a=originalWindow)?void 0:_a.Promise)?_c:null==(_b=originalGlobalThis)?void 0:_b.Promise;function setPromiseConstructor(e){promiseConstructorImpl=e}function getPromiseConstructor(){if(!promiseConstructorImpl)throw new Error("No `Promise` implementation available for `clipboard-polyfill`. Consider using: https://github.com/lgarron/clipboard-polyfill#flat-file-version-with-promise-included");return promiseConstructorImpl}function finallyConstructor(e){var o=this.constructor;return this.then(function(r){return o.resolve(e()).then(function(){return r})},function(r){return o.resolve(e()).then(function(){return o.reject(r)})})}function allSettled(e){return new this(function(o,r){if(!e||void 0===e.length)return r(new TypeError(typeof e+" "+e+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var t=Array.prototype.slice.call(e);if(0===t.length)return o([]);var i=t.length;function n(e,r){if(r&&("object"==typeof r||"function"==typeof r)){var a=r.then;if("function"==typeof a)return void a.call(r,function(o){n(e,o)},function(r){t[e]={status:"rejected",reason:r},0==--i&&o(t)})}t[e]={status:"fulfilled",value:r},0==--i&&o(t)}for(var a=0;a<t.length;a++)n(a,t[a])})}var setTimeoutFunc=setTimeout;function isArray(e){return Boolean(e&&void 0!==e.length)}function noop(){}function bind(e,o){return function(){e.apply(o,arguments)}}function PromisePolyfill(e){if(!(this instanceof PromisePolyfill))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],doResolve(e,this)}function handle(e,o){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,PromisePolyfill._immediateFn(function(){var r=1===e._state?o.onFulfilled:o.onRejected;if(null!==r){var t;try{t=r(e._value)}catch(e){return void reject(o.promise,e)}resolve(o.promise,t)}else(1===e._state?resolve:reject)(o.promise,e._value)})):e._deferreds.push(o)}function resolve(e,o){try{if(o===e)throw new TypeError("A promise cannot be resolved with itself.");if(o&&("object"==typeof o||"function"==typeof o)){var r=o.then;if(o instanceof PromisePolyfill)return e._state=3,e._value=o,void finale(e);if("function"==typeof r)return void doResolve(bind(r,o),e)}e._state=1,e._value=o,finale(e)}catch(o){reject(e,o)}}function reject(e,o){e._state=2,e._value=o,finale(e)}function finale(e){2===e._state&&0===e._deferreds.length&&PromisePolyfill._immediateFn(function(){e._handled||PromisePolyfill._unhandledRejectionFn(e._value)});for(var o=0,r=e._deferreds.length;o<r;o++)handle(e,e._deferreds[o]);e._deferreds=null}function Handler(e,o,r){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof o?o:null,this.promise=r}function doResolve(e,o){var r=!1;try{e(function(e){r||(r=!0,resolve(o,e))},function(e){r||(r=!0,reject(o,e))})}catch(e){if(r)return;r=!0,reject(o,e)}}PromisePolyfill.prototype.catch=function(e){return this.then(null,e)},PromisePolyfill.prototype.then=function(e,o){var r=new this.constructor(noop);return handle(this,new Handler(e,o,r)),r},PromisePolyfill.prototype.finally=finallyConstructor,PromisePolyfill.all=function(e){return new PromisePolyfill(function(o,r){if(!isArray(e))return r(new TypeError("Promise.all accepts an array"));var t=Array.prototype.slice.call(e);if(0===t.length)return o([]);var i=t.length;function n(e,a){try{if(a&&("object"==typeof a||"function"==typeof a)){var l=a.then;if("function"==typeof l)return void l.call(a,function(o){n(e,o)},r)}t[e]=a,0==--i&&o(t)}catch(e){r(e)}}for(var a=0;a<t.length;a++)n(a,t[a])})},PromisePolyfill.allSettled=allSettled,PromisePolyfill.resolve=function(e){return e&&"object"==typeof e&&e.constructor===PromisePolyfill?e:new PromisePolyfill(function(o){o(e)})},PromisePolyfill.reject=function(e){return new PromisePolyfill(function(o,r){r(e)})},PromisePolyfill.race=function(e){return new PromisePolyfill(function(o,r){if(!isArray(e))return r(new TypeError("Promise.race accepts an array"));for(var t=0,i=e.length;t<i;t++)PromisePolyfill.resolve(e[t]).then(o,r)})},PromisePolyfill._immediateFn="function"==typeof setImmediate&&function(e){setImmediate(e)}||function(e){setTimeoutFunc(e,0)},PromisePolyfill._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var _a2,PromisePolyfillConstructor=PromisePolyfill;setPromiseConstructor(PromisePolyfillConstructor),(null==(_a2=originalWindow)?void 0:_a2.Promise)||setPromiseConstructor(PromisePolyfillConstructor);var _a3,_a4,_a5,_a6,_a7,originalNavigator="undefined"==typeof navigator?void 0:navigator,originalNavigatorClipboard=null==originalNavigator?void 0:originalNavigator.clipboard,originalNavigatorClipboardRead=null==(_a3=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.read)?void 0:_a3.bind(originalNavigatorClipboard),originalNavigatorClipboardReadText=null==(_a4=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.readText)?void 0:_a4.bind(originalNavigatorClipboard),originalNavigatorClipboardWrite=null==(_a5=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.write)?void 0:_a5.bind(originalNavigatorClipboard),originalNavigatorClipboardWriteText=null==(_a6=null==originalNavigatorClipboard?void 0:originalNavigatorClipboard.writeText)?void 0:_a6.bind(originalNavigatorClipboard),originalWindowClipboardItem=null==(_a7=originalWindow)?void 0:_a7.ClipboardItem,promiseConstructor=getPromiseConstructor(),TEXT_PLAIN="text/plain",TEXT_HTML="text/html";function promiseRecordMap(e,o){for(var r=[],t=0;t<e.length;t++){var i=e[t];r.push(o(i))}return promiseConstructor.all(r).then(function(o){for(var r={},t=0;t<e.length;t++)r[e[t]]=o[t];return r})}var voidPromise=promiseConstructor.resolve(),truePromiseFn=function(){return promiseConstructor.resolve(!0)},falsePromise=promiseConstructor.resolve(!1);function rejectThrownErrors(e){return new promiseConstructor(function(o,r){try{o(e())}catch(e){r(e)}})}function stringToBlob(e,o){return new Blob([o],{type:e})}function blobToString(e){return new promiseConstructor(function(o,r){var t=new FileReader;t.addEventListener("load",function(){var e=t.result;"string"==typeof e?o(e):r("could not convert blob to string")}),t.readAsText(e)})}function clipboardItemToGlobalClipboardItem(e){return promiseRecordMap(e.types,function(o){return e.getType(o)}).then(function(o){return new promiseConstructor(function(r,t){var i={};e.presentationStyle&&(i.presentationStyle=e.presentationStyle),originalWindowClipboardItem?r(new originalWindowClipboardItem(o,i)):t("window.ClipboardItem is not defined")})})}function textToClipboardItem(e){var o={};return o[TEXT_PLAIN]=stringToBlob(e,TEXT_PLAIN),new ClipboardItemPolyfill(o)}function getTypeAsString(e,o){return e.getType(o).then(function(e){return blobToString(e)})}function toStringItem(e){return promiseRecordMap(e.types,function(o){return getTypeAsString(e,o)})}function ClipboardItemPolyfillImpl(e,o){var r,t=Object.keys(e),i={};for(var n in e){var a=e[n];i[n]="string"==typeof a?stringToBlob(n,a):a}return{types:t,presentationStyle:null!=(r=null==o?void 0:o.presentationStyle)?r:"unspecified",getType:function(e){return promiseConstructor.resolve(i[e])}}}var ClipboardItemPolyfill=ClipboardItemPolyfillImpl;function hasItemWithType(e,o){for(var r=0;r<e.length;r++){if(-1!==e[r].types.indexOf(o))return!0}return!1}var debugLogImpl=function(e){};function debugLog(e){debugLogImpl(e)}function setDebugLog(e){debugLogImpl=e}var showWarnings=!0;function suppressWarnings(){showWarnings=!1}function shouldShowWarnings(){return showWarnings}function warnOrLog(){(console.warn||console.log).apply(console,arguments)}var warn=warnOrLog.bind("[clipboard-polyfill]"),ieWindow=originalWindow;function seemToBeInIE(){return"undefined"==typeof ClipboardEvent&&void 0!==(null==ieWindow?void 0:ieWindow.clipboardData)&&void 0!==(null==ieWindow?void 0:ieWindow.clipboardData.setData)}function writeTextIE(e){if(!ieWindow.clipboardData)return!1;var o=ieWindow.clipboardData.setData("Text",e);return o&&debugLog("writeTextIE worked"),o}function readTextIE(){if(!ieWindow.clipboardData)throw new Error("Cannot read IE clipboard Data ");var e=ieWindow.clipboardData.getData("Text");if(""===e)throw new Error("Empty clipboard or could not read plain text from clipboard");return e}function copyListener(e,o,r){for(var t in debugLog("listener called"),e.success=!0,o){var i=o[t],n=r.clipboardData;n.setData(t,i),t===TEXT_PLAIN&&n.getData(t)!==i&&(debugLog("setting text/plain failed"),e.success=!1)}r.preventDefault()}function execCopy(e){var o={success:!1},r=copyListener.bind(this,o,e);document.addEventListener("copy",r);try{document.execCommand("copy")}finally{document.removeEventListener("copy",r)}return o.success}function copyUsingTempSelection(e,o){selectionSet(e);var r=execCopy(o);return selectionClear(),r}function copyUsingTempElem(e){var o=document.createElement("div");o.setAttribute("style","-webkit-user-select: text !important"),o.textContent="temporary element",document.body.appendChild(o);var r=copyUsingTempSelection(o,e);return document.body.removeChild(o),r}function copyTextUsingDOM(e){debugLog("copyTextUsingDOM");var o=document.createElement("div");o.setAttribute("style","-webkit-user-select: text !important");var r=o;o.attachShadow&&(debugLog("Using shadow DOM."),r=o.attachShadow({mode:"open"}));var t=document.createElement("span");t.innerText=e,r.appendChild(t),document.body.appendChild(o),selectionSet(t);var i=document.execCommand("copy");return selectionClear(),document.body.removeChild(o),i}function selectionSet(e){var o=document.getSelection();if(o){var r=document.createRange();r.selectNodeContents(e),o.removeAllRanges(),o.addRange(r)}}function selectionClear(){var e=document.getSelection();e&&e.removeAllRanges()}function writeFallback(e){var o=TEXT_PLAIN in e;if(seemToBeInIE()){if(!o)throw new Error("No `text/plain` value was specified.");if(writeTextIE(e[TEXT_PLAIN]))return!0;throw new Error("Copying failed, possibly because the user rejected it.")}return execCopy(e)?(debugLog("regular execCopy worked"),!0):navigator.userAgent.indexOf("Edge")>-1?(debugLog('UA "Edge" => assuming success'),!0):copyUsingTempSelection(document.body,e)?(debugLog("copyUsingTempSelection worked"),!0):copyUsingTempElem(e)?(debugLog("copyUsingTempElem worked"),!0):!!copyTextUsingDOM(e[TEXT_PLAIN])&&(debugLog("copyTextUsingDOM worked"),!0)}function stringToStringItem(e){var o={};return o[TEXT_PLAIN]=e,o}function writeText(e){return rejectThrownErrors(function(){return originalNavigatorClipboardWriteText?(debugLog("Using `navigator.clipboard.writeText()`."),originalNavigatorClipboardWriteText(e).catch(writeTextStringFallback)):promiseConstructor.resolve(writeTextStringFallback(e))})}function writeTextStringFallback(e){if(!writeFallback(stringToStringItem(e)))throw new Error("writeText() failed")}function readText(){return rejectThrownErrors(function(){if(originalNavigatorClipboardReadText)return debugLog("Using `navigator.clipboard.readText()`."),originalNavigatorClipboardReadText();if(seemToBeInIE()){var e=readTextIE();return promiseConstructor.resolve(e)}throw new Error("Read is not supported in your browser.")})}function write(e){return rejectThrownErrors(function(){if(originalNavigatorClipboardWrite&&originalWindowClipboardItem){var o=originalNavigatorClipboardWrite;return debugLog("Using `navigator.clipboard.write()`."),promiseConstructor.all(e.map(clipboardItemToGlobalClipboardItem)).then(function(r){return o(r).then(truePromiseFn).catch(function(o){if(!hasItemWithType(e,TEXT_PLAIN)&&!hasItemWithType(e,TEXT_HTML))throw o;return falsePromise})})}return falsePromise}).then(function(o){if(o)return voidPromise;var r=hasItemWithType(e,TEXT_PLAIN);return shouldShowWarnings()&&!r&&debugLog("clipboard.write() was called without a `text/plain` data type. On some platforms, this may result in an empty clipboard. Call suppressWarnings() to suppress this warning."),toStringItem(e[0]).then(function(e){if(!writeFallback(e))throw new Error("write() failed")})})}function read(){return rejectThrownErrors(function(){return originalNavigatorClipboardRead?(debugLog("Using `navigator.clipboard.read()`."),originalNavigatorClipboardRead()):readText().then(function(e){return[textToClipboardItem(e)]})})}window.clipboard={read:read,readText:readText,write:write,writeText:writeText,ClipboardItem:ClipboardItemPolyfill,setDebugLog:setDebugLog,suppressWarnings:suppressWarnings},window.PromisePolyfill=PromisePolyfillConstructor;